const express = require('express');
const { Op} = require('sequelize');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const {Spot,Image,User,Review,Booking} = require('../../db/models');
const { setTokenCookie, restoreUser } = require('../../utils/auth');
const user = require('../../db/models/user');


const router = express.Router();

router.get('/current', async(req,res) => {
    const {token} = req.cookies;

    if(token){
    const decodedPayload = jwt.decode(token);

    let userId = Number(decodedPayload.data.id);

    let bookings = await Booking.findAll({where:{userId:userId}});
    let arr = []
    for(let book of bookings){
        let spot = await Spot.findOne({where:{id:book.spotId}});
        let previewImage = await Image.findOne({
            where:{
                preview:true,
                imageableType:'Spot',
                imageableId: spot.id
            }
        })
        let obj = {
            id:book.id,
            spotId:book.spotId,
            Spot:{
                id:spot.id,
                ownerId:spot.ownerId,
                address:spot.address,
                city:spot.city,
                state:spot.state,
                country:spot.country,
                lat:spot.lat,
                lng:spot.lng,
                name:spot.name,
                price:spot.price,
                previewImage:previewImage.url
            },
            userId:book.userId,
            startDate:book.startDate,
            endDate:book.endDate,
            createdAt:book.createdAt,
            updatedAt:book.updatedAt
        }

        arr.push(obj);
    }

    res.json({Bookings:arr});

    }else return res.status(401).json({message:"Authentication required"});
})

router.put('/:bookingId', async(req,res) => {
    const {token} = req.cookies;

    if(token){
    const decodedPayload = jwt.decode(token);

    let userId = Number(decodedPayload.data.id);
    let booking = await Booking.findOne({where:{id:Number(req.params.bookingId)}});

    if(!booking) return res.status(404).json({ message: "Booking couldn't be found"});

    let newEndDate = new Date(booking.endDate);
    let currDate = new Date();
    if(newEndDate <= currDate )return res.status(403).json({
        message: "Past bookings can't be modified"
      });


    if(booking.userId == userId){
        let {startDate,endDate} = req.body;

        let errorBooking = await Booking.findOne({where:{
            spotId:booking.spotId,
            [Op.or]: [
                {
                    startDate: { [Op.lte]: new Date(startDate) },
                    endDate: { [Op.gte]: new Date(startDate) }
                  },

                  {
                    startDate: { [Op.between]: [new Date(startDate), new Date(endDate)] }
                  },

                  {
                    startDate: { [Op.lte]: new Date(endDate) },
                    endDate: { [Op.gte]: new Date(endDate) }
                  }

            ]
        }})

        if(errorBooking)return res.status(403).json({

                message: "Sorry, this spot is already booked for the specified dates",
                errors: {
                  "startDate": "Start date conflicts with an existing booking",
                  "endDate": "End date conflicts with an existing booking"
                }

        });



        try{
        booking.startDate = startDate;
        booking.endDate = endDate;

        await booking.validate();
        await booking.save();

        return res.json(booking)

        }catch{
            return res.status(400).json({
                message: "Bad Request", // (or "Validation error" if generated by Sequelize),
                errors: {
                  startDate: "startDate cannot be in the past",
                  endDate: "endDate cannot be on or before startDate"
                }
              })
        }

    }else return res.status(403).json({message:'Forbidden'});

    }else return res.status(401).json({message:"Authentication required"});
})

router.delete('/:bookingId', async(req,res)=> {
    const {token} = req.cookies;

    if(token){
    const decodedPayload = jwt.decode(token);

    let userId = Number(decodedPayload.data.id);
    let booking = await Booking.findOne({where:{id:Number(req.params.bookingId)}});

    if(!booking) return res.status(404).json({message: "Booking couldn't be found"});

    if(booking.userId == userId){
        let newStartDate = new Date(booking.startDate);
        let currDate = new Date("2030-09-02");
        if(newStartDate <=  currDate) return res.status(403).json({message: "Bookings that have been started can't be deleted"});

        await booking.destroy();

        return res.json({
            message: "Successfully deleted"
          });

    }else return res.status(403).json({message:"Forbidden"});

    }else return res.status(401).json({message:"Authentication required"});
})

module.exports = router;
