const express = require('express');
const { Op} = require('sequelize');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const {Spot,Image,User,Review} = require('../../db/models');
const { setTokenCookie, restoreUser } = require('../../utils/auth');
const spot = require('../../db/models/spot');

const router = express.Router();

router.get('/current', async(req,res) => {
    const {token} = req.cookies;
    const decodedPayload = jwt.decode(token);

    let userId = Number(decodedPayload.data.id);

    if(token && userId != NaN){
        let arr = [];
        let reviews = await Review.findAll({
            where:{userId:userId}
        });

        let user = await User.findOne({
            where:{id:userId},
            attributes:{exclude:['hashedPassword','email','username','createdAt','updatedAt']}
        });

        for(let curr of reviews){
            let obj ={
                id:curr.id,
                userId:curr.userId,
                spotId:curr.spotId,
                review:curr.review,
                stars:curr.stars,
                createdAt:curr.createdAt,
                updatedAt:curr.updatedAt,
                User:{
                    id:user.id,
                    firstName:user.firstName,
                    lastName:user.lastName
                }
            };

            let spot = await Spot.findOne({where:{id:curr.spotId}});
            let spotPreviewImage = await Image.findOne({where:{
                imageableType:'Spot',
                preview:true,
                imageableId:curr.spotId

            }});

            let spotObj = {
                id:spot.id,
                ownerId:spot.ownerId,
                address:spot.address,
                city:spot.city,
                state:spot.state,
                country:spot.country,
                lat:spot.lat,
                lng:spot.lng,
                name:spot.name,
                price:spot.price,
                previewImage: spotPreviewImage.url
            }

            obj.Spot = spotObj;

            let reviewImages = await Image.findAll({
                where:{
                    imageableType:'Review',
                    imageableId:curr.id
                },
                attributes:['id','url']
            });

            obj.ReviewImages = reviewImages;
            arr.push(obj)
        }
        res.json({Reviews:arr});
    }
})


router.post('/:reviewId/images', async(req,res) => {
    const {token} = req.cookies;
    const decodedPayload = jwt.decode(token);

    let userId = Number(decodedPayload.data.id);
    let reviewId = req.params.reviewId;

    let review = await Review.findOne({
        where:{
            id:Number(reviewId),
            userId:userId
        }
    })
    if(token && review && userId != NaN){

        const {url} = req.body;

        let allReviewsImages = await Image.findAll({
            where:{
                imageableId:review.id
            }
        })
        if(allReviewsImages.length > 10) return res.status(403).json({
            message: "Maximum number of images for this resource was reached"
          });


         await Image.create({
            imageableType:'Review',
            url:url,
            imageableId: review.id
        },{validate:true});

        let newImage = await Image.findOne({where:{
            url:url,
            imageableType:'Review',
            imageableId:review.id
        },
        attributes:{exclude:['imageableType','imageableId','preview','createdAt','updatedAt']}
    });

        res.json(newImage);

    }else res.status(404).json({message: "Review couldn't be found"});
})


router.put('/:reviewId', async(req,res) => {
    const {token} = req.cookies;
    const decodedPayload = jwt.decode(token);

    let userId = Number(decodedPayload.data.id);
    let reviewId = req.params.reviewId;

    let foundReview = await Review.findOne({
        where:{
            id:Number(reviewId),
            userId:userId
        }
    })

    if(token && foundReview){
        const {review,stars} = req.body

    try{
       let newReview = await foundReview.update({
            review:review,
            stars:stars
        },{validate:true});

        res.json(newReview);
    }catch{
        res.status(400).json({
            message: "Bad Request", // (or "Validation error" if generated by Sequelize),
            errors: {
                review: "Review text is required",
                stars: "Stars must be an integer from 1 to 5",
            }
        })
    }
    }else res.status(404).json({message:"Review couldn't be found"});

})

router.delete('/:reviewId', async(req,res) => {
    const {token} = req.cookies;
    const decodedPayload = jwt.decode(token);

    let userId = Number(decodedPayload.data.id);
    let reviewId = req.params.reviewId;

    let foundReview = await Review.findOne({
        where:{
            id:Number(reviewId),
            userId:userId
        }
    })

    if(token && foundReview){
        await foundReview.destroy();
        res.json({
            message: "Successfully deleted"
          });
    }else res.status(404).json({message: "Review couldn't be found"});
})
module.exports = router;
